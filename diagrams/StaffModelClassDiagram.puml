@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor MODEL_COLOR
skinparam classBackgroundColor MODEL_COLOR

package "Staff Model" as StaffModel {
    class Person

    class Staff {
        - staffId: StaffId
        - role: Role
        - shiftTiming: ShiftTiming
        - hoursWorked: HoursWorked
        - performanceRating: PerformanceRating
        + getStaffId(): StaffId
        + getRole(): Role
        + getShiftTiming(): ShiftTiming
        + getHoursWorked(): HoursWorked
        + getPerformanceRating(): PerformanceRating
        + isSameStaff(otherStaff): boolean
        + equals(Object): boolean
        + hashCode(): int
        + toString(): String
    }

    class StaffId {
        - {static} MESSAGE_CONSTRAINTS: String
        - {static} VALIDATION_REGEX: String
        - staffId: String
        + getStaffId(): String
        + {static} isValidStaffId(String): boolean
        + equals(Object): boolean
        + hashCode(): int
        + toString(): String
    }

    class Role {
        - {static} MESSAGE_CONSTRAINTS: String
        - {static} VALIDATION_REGEX: String
        - role: String
        + getRole(): String
        + {static} isValidRole(String): boolean
        + equals(Object): boolean
        + hashCode(): int
        + toString(): String
    }

    class ShiftTiming {
        - {static} MESSAGE_CONSTRAINTS: String
        - {static} VALIDATION_REGEX: String
        - shiftTiming: String
        + getShiftTiming(): String
        + {static} isValidShiftTiming(String): boolean
        + equals(Object): boolean
        + hashCode(): int
        + toString(): String
    }

    class HoursWorked {
        - {static} MESSAGE_CONSTRAINTS: String
        - hoursWorked: int
        + getHours(): int
        + {static} isValidHours(int): boolean
        + equals(Object): boolean
        + hashCode(): int
        + toString(): String
    }

    class PerformanceRating {
        - {static} MESSAGE_CONSTRAINTS: String
        - rating: double
        + getRating(): double
        + {static} isValidRating(double): boolean
        + equals(Object): boolean
        + hashCode(): int
        + toString(): String
    }

    class UniquePersonList {
        - internalList: ObservableList<Person>
        - internalUnmodifiableList: ObservableList<Person>
        + contains(Person): boolean
        + add(Person): void
        + setPerson(Person, Person): void
        + remove(Person): void
        + setPersons(List<Person>): void
        + setPersons(UniquePersonList): void
        + asUnmodifiableObservableList(): ObservableList<Person>
        + getFilteredList<T extends Person>(Class<T>): FilteredList<T>
        + iterator(): Iterator<Person>
        + equals(Object): boolean
        + hashCode(): int
        + toString(): String
        - personsAreUnique(List<Person>): boolean
    }
}

Staff -up-|> Person
Staff *--> "1" StaffId
Staff *--> "1" Role
Staff *--> "1" ShiftTiming
Staff *--> "1" HoursWorked
Staff *--> "1" PerformanceRating

UniquePersonList o--> "*" Staff
UniquePersonList ..|> "Iterable<Person>" : implements

@enduml
