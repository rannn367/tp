@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor MODEL_COLOR
skinparam classBackgroundColor MODEL_COLOR

package "Drink Model" as DrinkModel {
    class Drink {
        - name: DrinkName
        - price: Price
        - category: Category
        - description: String
        - stock: int
        + Drink(name: String, price: double, category: String)
        + getName(): DrinkName
        + getPrice(): Price
        + getCategory(): Category
        + getPrintableName(): String
        + getPrintablePrice(): String
        + getPrintableCategory(): String
        + getPrimitiveName(): String
        + getPrimitivePrice(): double
        + getPrimitiveCategory(): String
        + getDescription(): String
        + getStock(): int
        + setDescription(description: String): void
        + setStock(stock: int): void
        + isSameDrink(otherDrink: Drink): boolean
        + equals(Object): boolean
        + hashCode(): int
        + toString(): String
    }

    class DrinkName {
        - {static} MESSAGE_CONSTRAINTS: String
        - {static} VALIDATION_REGEX: String
        - drinkName: String
        + DrinkName(drinkName: String)
        + getDrinkName(): String
        + {static} isValidDrinkName(test: String): boolean
        + equals(Object): boolean
        + equalsNameIgnoreCase(otherName: String): boolean
        + containsWordIgnoreCase(word: String): boolean
        + hashCode(): int
        + toString(): String
    }

    class Price {
        - {static} MESSAGE_CONSTRAINTS: String
        - {static} POINTS_PER_DOLLAR: int
        - {static} POINTS_TO_DOLLAR_RATIO: int
        - price: double
        + Price(price: double)
        + getPrice(): double
        + {static} isValidPrice(test: double): boolean
        + calculatePointsForPurchase(): int
        + calculatePointsForRedemption(): int
        + equals(Object): boolean
        + hashCode(): int
        + toString(): String
    }

    class Category {
        - {static} MESSAGE_CONSTRAINTS: String
        - {static} VALIDATION_REGEX: String
        - category: String
        + Category(category: String)
        + getCategory(): String
        + {static} isValidCategory(test: String): boolean
        + equals(Object): boolean
        + hashCode(): int
        + toString(): String
    }

    class UniqueDrinkList {
        - internalList: ObservableList<Drink>
        - internalUnmodifiableList: ObservableList<Drink>
        + contains(toCheck: Drink): boolean
        + add(toAdd: Drink): void
        + setDrink(target: Drink, editedDrink: Drink): void
        + remove(toRemove: Drink): void
        + setDrinks(drinks: List<Drink>): void
        + setDrinks(replacement: UniqueDrinkList): void
        + asUnmodifiableObservableList(): ObservableList<Drink>
        + iterator(): Iterator<Drink>
        + equals(Object): boolean
        + hashCode(): int
        + toString(): String
        - drinksAreUnique(drinks: List<Drink>): boolean
    }

    class "DrinkNotFoundException" as DrinkNotFoundException << Exception >> {
    }

    class "DuplicateDrinkException" as DuplicateDrinkException << Exception >> {
    }

    interface "ReadOnlyDrinkCatalog" {
        + getDrinkList(): List<Drink>
    }

    class DrinkCatalog {
        - drinks: UniqueDrinkList
        + DrinkCatalog()
        + getDrinkList(): List<Drink>
        + hasDrink(drink: Drink): boolean
        + addDrink(drink: Drink): void
        + setDrink(target: Drink, editedDrink: Drink): void
        + removeDrink(target: Drink): void
        + setDrinks(drinks: List<Drink>): void
        + setDrinks(replacement: ReadOnlyDrinkCatalog): void
        + getDrinkByName(name: String): Optional<Drink>
        + equals(Object): boolean
        + hashCode(): int
    }
}

Drink *--> "1" DrinkName
Drink *--> "1" Price
Drink *--> "1" Category

DrinkCatalog ..|> ReadOnlyDrinkCatalog
DrinkCatalog *--> "1" UniqueDrinkList

UniqueDrinkList o--> "*" Drink
UniqueDrinkList ..> DrinkNotFoundException : throws >
UniqueDrinkList ..> DuplicateDrinkException : throws >
UniqueDrinkList ..|> "Iterable<Drink>" : implements

@enduml
